# Generated by Django 4.2.11 on 2024-05-19 07:19

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Account',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('phone_number', models.CharField(blank=True, max_length=20, null=True)),
                ('gender', models.CharField(choices=[('MALE', 'MALE'), ('FEMALE', 'FEMALE')], max_length=6)),
            ],
        ),
        migrations.CreateModel(
            name='Categories',
            fields=[
                ('catid', models.AutoField(db_column='catId', primary_key=True, serialize=False)),
                ('catname', models.CharField(db_column='catName', max_length=120)),
            ],
            options={
                'db_table': 'categories',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Contactdetails',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('district', models.CharField(blank=True, max_length=45, null=True)),
                ('city', models.CharField(max_length=45)),
                ('country', models.CharField(max_length=45)),
                ('zipcode', models.IntegerField()),
                ('phone', models.CharField(max_length=20)),
                ('street', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'contactdetails',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Customers',
            fields=[
                ('customer_id', models.AutoField(db_column='customer_Id', primary_key=True, serialize=False)),
                ('customer_fname', models.CharField(max_length=60)),
                ('customer_lname', models.CharField(max_length=60)),
                ('phone', models.CharField(blank=True, max_length=15, null=True)),
            ],
            options={
                'db_table': 'customers',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Orders',
            fields=[
                ('orderid', models.AutoField(db_column='orderId', primary_key=True, serialize=False)),
                ('orderdate', models.DateField(db_column='orderDate')),
                ('status', models.CharField(max_length=10)),
                ('deliverydate', models.DateField(db_column='deliveryDate')),
                ('customerid', models.ForeignKey(blank=True, db_column='customerId', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='base.customers')),
                ('shippingaddressid', models.ForeignKey(db_column='shippingAddressId', on_delete=django.db.models.deletion.DO_NOTHING, to='base.contactdetails')),
            ],
            options={
                'db_table': 'orders',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Products',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('productname', models.CharField(db_column='productName', max_length=120)),
                ('description', models.TextField(blank=True, null=True)),
                ('price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('stock_quantity', models.IntegerField(blank=True, null=True)),
                ('instock', models.IntegerField(blank=True, db_column='inStock', null=True)),
                ('catid', models.ForeignKey(blank=True, db_column='catId', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='base.categories')),
            ],
            options={
                'db_table': 'products',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Roles',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('rolename', models.CharField(db_column='roleName', max_length=45)),
                ('created_at', models.DateTimeField(db_column='Created_at')),
                ('updated_at', models.DateTimeField(db_column='Updated_at')),
            ],
            options={
                'db_table': 'roles',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Tickets',
            fields=[
                ('ticketid', models.AutoField(db_column='ticketId', primary_key=True, serialize=False)),
                ('eventname', models.CharField(db_column='eventName', max_length=255)),
                ('eventdate', models.DateField(blank=True, db_column='eventDate', null=True)),
                ('venue', models.CharField(blank=True, max_length=50, null=True)),
                ('ticketprice', models.DecimalField(blank=True, db_column='ticketPrice', decimal_places=2, max_digits=10, null=True)),
                ('isavailable', models.IntegerField(db_column='isAvailable')),
                ('customerid', models.ForeignKey(db_column='customerId', on_delete=django.db.models.deletion.DO_NOTHING, to='base.customers')),
            ],
            options={
                'db_table': 'tickets',
                'managed': True,
                'unique_together': {('ticketid', 'customerid')},
            },
        ),
        migrations.CreateModel(
            name='Users',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(max_length=45, unique=True)),
                ('password', models.CharField(max_length=45)),
                ('email', models.CharField(blank=True, max_length=60, null=True, unique=True)),
                ('status', models.CharField(max_length=8)),
                ('role', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='base.roles')),
            ],
            options={
                'db_table': 'users',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Trips',
            fields=[
                ('tripid', models.AutoField(db_column='tripId', primary_key=True, serialize=False)),
                ('departuredate', models.DateField(blank=True, db_column='departureDate', null=True)),
                ('returndate', models.DateField(blank=True, db_column='returnDate', null=True)),
                ('eventdescription', models.TextField(blank=True, db_column='eventDescription', null=True)),
                ('destination', models.CharField(blank=True, max_length=60, null=True)),
                ('eventid', models.ForeignKey(blank=True, db_column='eventId', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='base.tickets')),
            ],
            options={
                'db_table': 'trips',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Reviews',
            fields=[
                ('reviewid', models.AutoField(db_column='reviewId', primary_key=True, serialize=False)),
                ('rating', models.IntegerField(blank=True, null=True)),
                ('reviewcomment', models.TextField(blank=True, db_column='reviewComment', null=True)),
                ('reviewdate', models.DateField(blank=True, db_column='reviewDate', null=True)),
                ('helpfulvotes', models.IntegerField(blank=True, db_column='helpfulVotes', null=True)),
                ('customerid', models.ForeignKey(blank=True, db_column='customerId', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='base.customers')),
                ('productid', models.ForeignKey(blank=True, db_column='productId', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='base.products')),
            ],
            options={
                'db_table': 'reviews',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Reviewimages',
            fields=[
                ('id', models.IntegerField(db_column='Id', primary_key=True, serialize=False)),
                ('imageurl', models.CharField(blank=True, db_column='imageUrl', max_length=255, null=True)),
                ('reviewid', models.ForeignKey(db_column='reviewId', on_delete=django.db.models.deletion.DO_NOTHING, to='base.reviews')),
            ],
            options={
                'db_table': 'reviewimages',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Payments',
            fields=[
                ('paymentid', models.AutoField(db_column='paymentId', primary_key=True, serialize=False)),
                ('paymentdate', models.DateField(blank=True, db_column='paymentDate', null=True)),
                ('amount', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('paymentmethod', models.CharField(blank=True, db_column='paymentMethod', max_length=50, null=True)),
                ('orderid', models.ForeignKey(blank=True, db_column='orderId', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='base.orders')),
            ],
            options={
                'db_table': 'payments',
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='contactdetails',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='base.users'),
        ),
        migrations.CreateModel(
            name='Wishlist',
            fields=[
                ('customer', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='base.customers')),
                ('product_id', models.IntegerField()),
                ('date_added', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'wishlist',
                'managed': True,
                'unique_together': {('customer', 'product_id')},
            },
        ),
        migrations.CreateModel(
            name='Productimages',
            fields=[
                ('productid', models.OneToOneField(db_column='productId', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='base.products')),
                ('imageurl', models.CharField(db_column='imageUrl', max_length=45)),
            ],
            options={
                'db_table': 'productimages',
                'managed': True,
                'unique_together': {('productid', 'imageurl')},
            },
        ),
        migrations.CreateModel(
            name='Cart',
            fields=[
                ('cart_id', models.AutoField(db_column='cart_id', default=1, primary_key=True, serialize=True)),
                ('quantity', models.IntegerField()),
                ('date_added', models.DateTimeField()),
                ('customerid', models.ForeignKey(db_column='customerId', default=1, on_delete=django.db.models.deletion.DO_NOTHING, to='base.customers')),
                ('productid', models.ForeignKey(db_column='productId', on_delete=django.db.models.deletion.DO_NOTHING, to='base.products')),
            ],
            options={
                'db_table': 'cart',
                'managed': True,
                'unique_together': {('customerid', 'productid')},
            },
        ),
        migrations.CreateModel(
            name='Orderproducts',
            fields=[
                ('orderid', models.OneToOneField(db_column='orderId', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='base.orders')),
                ('price', models.FloatField()),
                ('quantity', models.IntegerField()),
                ('productid', models.ForeignKey(db_column='productId', on_delete=django.db.models.deletion.DO_NOTHING, to='base.products')),
            ],
            options={
                'db_table': 'orderproducts',
                'managed': True,
                'unique_together': {('orderid', 'productid')},
            },
        ),
    ]
